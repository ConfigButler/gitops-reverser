name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.1'
  KUSTOMIZE_VERSION: 'v5.4.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: configbutler/gitops-reverser
  IMAGE_TAG: ci-${{ github.sha }}

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  build-devcontainer:
    name: Build Dev Container
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:${{ github.sha }}"
          echo "name=${IMAGE}" >> $GITHUB_OUTPUT
          echo "Building dev container: ${IMAGE}"

      - name: Build and push dev container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ${{ steps.image.outputs.name }}
            ${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:buildcache,mode=max

  lint-and-test:
    name: Lint and unit tests
    runs-on: ubuntu-latest
    needs: build-devcontainer
    container:
      image: ${{ needs.build-devcontainer.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          install-mode: none

      - name: Verify dev container tools
        run: |
          echo "=== Verifying pre-installed tools ==="
          go version
          kind version
          kubectl version --client
          kustomize version
          golangci-lint version

      - name: Run tests
        run: make test

  docker-build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set full image name
        id: image
        run: |
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "name=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "Building image: ${FULL_IMAGE}"

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: linux/amd64
          tags: ${{ steps.image.outputs.name }}
          outputs: type=image,push=true
          cache-scope: build-linux/amd64

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-devcontainer, docker-build]
    container:
      image: ${{ needs.build-devcontainer.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged -v /var/run/docker.sock:/var/run/docker.sock
    env:
      TEST_IMAGE: ${{ needs.docker-build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Verify Docker is available
        run: |
          docker version
          docker info

      - name: Verify dev container tools
        run: |
          echo "=== Verifying pre-installed tools ==="
          go version
          kind version
          kubectl version --client

      - name: Set up KinD cluster with diagnostics
        run: |
          set -x  # Enable verbose command output
          
          echo "=========================================="
          echo "PHASE 1: Docker Environment Analysis"
          echo "=========================================="
          
          echo "--- Docker Version ---"
          docker version
          
          echo "--- Docker Networks ---"
          docker network ls
          
          echo "--- Docker Info ---"
          docker info | grep -E "Server Version|Operating System|Kernel Version|CPUs|Total Memory"
          
          echo "=========================================="
          echo "PHASE 2: Container Detection"
          echo "=========================================="
          
          CURRENT_CONTAINER=$(hostname)
          echo "Hostname: ${CURRENT_CONTAINER}"
          
          echo "--- Attempting to inspect current container ---"
          if docker inspect ${CURRENT_CONTAINER} >/dev/null 2>&1; then
            echo "✅ Successfully found current container: ${CURRENT_CONTAINER}"
            
            echo "--- Current Container Networks ---"
            docker inspect ${CURRENT_CONTAINER} -f '{{range $net,$v := .NetworkSettings.Networks}}Network: {{$net}}, IP: {{$v.IPAddress}}{{"\n"}}{{end}}'
            
            echo "--- Current Container Full Network Info (JSON) ---"
            docker inspect ${CURRENT_CONTAINER} -f '{{json .NetworkSettings.Networks}}' | jq -r '.' || echo "jq not available"
          else
            echo "❌ ERROR: Cannot inspect container with hostname '${CURRENT_CONTAINER}'"
            echo "This likely means we're not running in a Docker container or hostname doesn't match container name"
            echo "Listing all running containers:"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}"
          fi
          
          echo "=========================================="
          echo "PHASE 3: Creating Kind Cluster"
          echo "=========================================="
          
          kind create cluster --name gitops-reverser-test-e2e --wait 5m --verbosity 4
          
          echo "--- Kind Cluster Created ---"
          kind get clusters
          
          echo "--- Kind Container Info ---"
          docker ps -a | grep kind
          
          echo "=========================================="
          echo "PHASE 4: Network Topology Analysis"
          echo "=========================================="
          
          echo "--- Kind Control Plane Networks ---"
          docker inspect gitops-reverser-test-e2e-control-plane -f '{{range $net,$v := .NetworkSettings.Networks}}Network: {{$net}}, IP: {{$v.IPAddress}}{{"\n"}}{{end}}'
          
          echo "--- Kind Control Plane Full Network Info (JSON) ---"
          docker inspect gitops-reverser-test-e2e-control-plane -f '{{json .NetworkSettings.Networks}}' | jq -r '.' || docker inspect gitops-reverser-test-e2e-control-plane -f '{{json .NetworkSettings.Networks}}'
          
          echo "=========================================="
          echo "PHASE 5: Network Connection Attempt"
          echo "=========================================="
          
          # Try to detect GitHub Actions container network
          GITHUB_NETWORK=$(docker inspect ${CURRENT_CONTAINER} -f '{{range $net,$v := .NetworkSettings.Networks}}{{$net}}{{end}}' 2>/dev/null | head -n1)
          
          if [ -z "${GITHUB_NETWORK}" ]; then
            echo "⚠️  WARNING: Could not detect GitHub Actions container network"
            echo "Possible reasons:"
            echo "  1. Not running in a container"
            echo "  2. Container name doesn't match hostname"
            echo "  3. No network attached to container"
            echo ""
            echo "Attempting to continue with Kind's default networking..."
            SKIP_NETWORK_BRIDGE=true
          else
            echo "✅ Detected network: ${GITHUB_NETWORK}"
            
            echo "--- Attempting to connect Kind to ${GITHUB_NETWORK} ---"
            if docker network connect ${GITHUB_NETWORK} gitops-reverser-test-e2e-control-plane 2>&1; then
              echo "✅ Successfully connected Kind to ${GITHUB_NETWORK}"
              
              echo "--- Updated Kind Container Networks ---"
              docker inspect gitops-reverser-test-e2e-control-plane -f '{{range $net,$v := .NetworkSettings.Networks}}Network: {{$net}}, IP: {{$v.IPAddress}}{{"\n"}}{{end}}'
            else
              echo "❌ Failed to connect Kind to ${GITHUB_NETWORK}"
              echo "Attempting to continue with Kind's default networking..."
              SKIP_NETWORK_BRIDGE=true
            fi
          fi
          
          echo "=========================================="
          echo "PHASE 6: Connectivity Testing"
          echo "=========================================="
          
          if [ "${SKIP_NETWORK_BRIDGE}" != "true" ] && [ -n "${GITHUB_NETWORK}" ]; then
            KIND_IP=$(docker inspect gitops-reverser-test-e2e-control-plane -f "{{.NetworkSettings.Networks.${GITHUB_NETWORK}.IPAddress}}" 2>/dev/null)
            
            if [ -n "${KIND_IP}" ] && [ "${KIND_IP}" != "<no value>" ]; then
              echo "✅ Kind container IP on ${GITHUB_NETWORK}: ${KIND_IP}"
              
              echo "--- Testing ping to Kind container ---"
              if ping -c 3 -W 2 ${KIND_IP} 2>&1; then
                echo "✅ Successfully pinged Kind container"
              else
                echo "⚠️  WARNING: Cannot ping Kind container (may not be fatal)"
              fi
              
              echo "--- Testing port connectivity ---"
              # IMPORTANT: Use internal Kubernetes API port (6443), not the external mapped port
              # Kind maps 6443 to a random external port for localhost, but on Docker networks
              # we connect directly to the container, so we must use the internal port 6443
              API_PORT=6443
              echo "Using internal Kubernetes API port: ${API_PORT}"
              
              if timeout 5 bash -c "cat < /dev/null > /dev/tcp/${KIND_IP}/${API_PORT}" 2>/dev/null; then
                echo "✅ Port ${API_PORT} is reachable on ${KIND_IP}"
              else
                echo "⚠️  WARNING: Cannot connect to port ${API_PORT} on ${KIND_IP}"
              fi
              
              echo "--- Updating kubeconfig to use shared network IP ---"
              # Update to use the shared network IP and skip TLS verification
              # TLS verification must be skipped because the API server's certificate
              # was created with SANs for the Kind network IP (172.19.0.2), not the
              # GitHub network IP (172.18.0.3) that we're connecting through
              kubectl config set-cluster kind-gitops-reverser-test-e2e \
                --server=https://${KIND_IP}:${API_PORT} \
                --insecure-skip-tls-verify=true
              
              echo "ℹ️  Note: TLS verification disabled for CI (certificate doesn't include shared network IP)"
            else
              echo "⚠️  WARNING: Could not get Kind IP on shared network"
              echo "Using Kind's default networking configuration"
            fi
          else
            echo "ℹ️  INFO: Using Kind's default networking (no network bridge)"
          fi
          
          echo "=========================================="
          echo "PHASE 7: Kubeconfig Verification"
          echo "=========================================="
          
          echo "--- Current Kubeconfig ---"
          kubectl config view
          
          KUBECONFIG_SERVER=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')
          echo "Configured API Server: ${KUBECONFIG_SERVER}"
          
          echo "=========================================="
          echo "PHASE 8: Cluster Connection Test"
          echo "=========================================="
          
          echo "--- Testing cluster-info (with verbose logging) ---"
          if kubectl cluster-info --v=6 2>&1; then
            echo "✅ kubectl cluster-info succeeded"
          else
            echo "❌ kubectl cluster-info FAILED"
            exit 1
          fi
          
          echo "--- Testing get nodes (with verbose logging) ---"
          if kubectl get nodes --v=6 2>&1; then
            echo "✅ kubectl get nodes succeeded"
          else
            echo "❌ kubectl get nodes FAILED"
            echo ""
            echo "=========================================="
            echo "FAILURE DIAGNOSIS"
            echo "=========================================="
            echo "The cluster was created but kubectl cannot connect."
            echo "This indicates a networking or configuration issue."
            exit 1
          fi
          
          echo "=========================================="
          echo "✅ SUCCESS: Kind cluster is ready and accessible"
          echo "=========================================="

      - name: Login to Docker registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and load image to KinD
        run: |
          echo "Pulling image: ${{ needs.docker-build.outputs.image }}"
          docker pull ${{ needs.docker-build.outputs.image }}
          kind load docker-image ${{ needs.docker-build.outputs.image }} --name gitops-reverser-test-e2e

      - name: Reconfigure kubeconfig for network bridge
        run: |
          # The setup-test-e2e target in Makefile calls 'kind export kubeconfig'
          # which overwrites our network configuration. We need to reapply it.
          echo "Reconfiguring kubeconfig to use shared network IP..."
          
          CURRENT_CONTAINER=$(hostname)
          GITHUB_NETWORK=$(docker inspect ${CURRENT_CONTAINER} -f '{{range $net,$v := .NetworkSettings.Networks}}{{$net}}{{end}}' 2>/dev/null | head -n1)
          
          if [ -n "${GITHUB_NETWORK}" ]; then
            KIND_IP=$(docker inspect gitops-reverser-test-e2e-control-plane -f "{{.NetworkSettings.Networks.${GITHUB_NETWORK}.IPAddress}}" 2>/dev/null)
            
            if [ -n "${KIND_IP}" ] && [ "${KIND_IP}" != "<no value>" ]; then
              echo "Updating kubeconfig to use Kind IP ${KIND_IP} on shared network"
              kubectl config set-cluster kind-gitops-reverser-test-e2e \
                --server=https://${KIND_IP}:6443 \
                --insecure-skip-tls-verify=true
              
              # Verify it works
              kubectl cluster-info
              kubectl get nodes
              
              echo "✅ Kubeconfig reconfigured successfully"
            else
              echo "⚠️  WARNING: Could not detect Kind IP on shared network"
              echo "Continuing with default Kind networking..."
            fi
          else
            echo "⚠️  WARNING: Could not detect GitHub network"
            echo "Continuing with default Kind networking..."
          fi

      - name: Run E2E tests
        run: |
          export PROJECT_IMAGE="${{ needs.docker-build.outputs.image }}"
          
          # Run test prerequisites without setup-test-e2e (cluster already exists)
          # But run cleanup-webhook, setup-cert-manager, setup-gitea-e2e, manifests, generate, fmt, vet
          make cleanup-webhook || true  # Ignore error if webhook doesn't exist
          make setup-cert-manager
          make setup-gitea-e2e
          make manifests generate fmt vet
          
          # Reconfigure kubeconfig one more time in case any of the above steps changed it
          CURRENT_CONTAINER=$(hostname)
          GITHUB_NETWORK=$(docker inspect ${CURRENT_CONTAINER} -f '{{range $net,$v := .NetworkSettings.Networks}}{{$net}}{{end}}' 2>/dev/null | head -n1)
          if [ -n "${GITHUB_NETWORK}" ]; then
            KIND_IP=$(docker inspect gitops-reverser-test-e2e-control-plane -f "{{.NetworkSettings.Networks.${GITHUB_NETWORK}.IPAddress}}" 2>/dev/null)
            if [ -n "${KIND_IP}" ] && [ "${KIND_IP}" != "<no value>" ]; then
              kubectl config set-cluster kind-gitops-reverser-test-e2e \
                --server=https://${KIND_IP}:6443 \
                --insecure-skip-tls-verify=true
            fi
          fi
          
          # Run the actual e2e tests
          KIND_CLUSTER=gitops-reverser-test-e2e go test ./test/e2e/ -v -ginkgo.v

  # Release job only runs on push to main after tests pass
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-test, e2e-test]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Build and push Docker images in parallel for each platform
  publish:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image by digest
        id: build
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          cache-scope: build-${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge all platform images into multi-arch manifests
  publish-manifest:
    name: Publish Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [release-please, publish]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Update release with Docker image info
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          append_body: true
          body: |
            
            ## Docker Images
            
            This release is available as a Docker image:
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            **Platforms:** linux/amd64, linux/arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
