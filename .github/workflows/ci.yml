name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.1'
  KUSTOMIZE_VERSION: 'v5.4.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: configbutler/gitops-reverser
  IMAGE_TAG: ci-${{ github.sha }}
  CHART_REGISTRY: ghcr.io/configbutler/charts

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-ci-container:
    name: Build CI Base Container
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/configbutler/gitops-reverser-ci:${{ github.sha }}"
          echo "name=${IMAGE}" >> $GITHUB_OUTPUT
          echo "Building CI base container: ${IMAGE}"

      - name: Build and push CI base container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile.ci
          push: true
          load: true  # So that we can run the next step without pulling
          tags: |
            ${{ steps.image.outputs.name }}
            ${{ env.REGISTRY }}/configbutler/gitops-reverser-ci:latest
          cache-from: type=gha,scope=ci-container
          cache-to: type=gha,mode=max,scope=ci-container

      - name: Validate CI container tools
        run: |
          docker run --rm ${{ steps.image.outputs.name }} bash -c "
            set -e
            echo '=== Validating CI Container Tools ==='
            go version
            kubectl version --client
            kustomize version
            helm version
            golangci-lint version
            controller-gen --version
            echo 'âœ… All CI container tools verified'
          "

  validate-devcontainer:
    name: Validate Dev Container
    runs-on: ubuntu-latest
    needs: build-ci-container
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build dev container (validation only)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: false
          load: true
          tags: gitops-reverser-devcontainer:test
          cache-from: type=gha,scope=devcontainer
          cache-to: type=gha,scope=devcontainer,mode=max
          build-args: |
            CI_BASE_IMAGE=${{ needs.build-ci-container.outputs.image }}
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1

      - name: Validate dev container tools
        run: |
          docker run --rm gitops-reverser-devcontainer:test bash -c "
            set -e
            echo '=== Validating Dev Container Tools ==='
            go version
            kubectl version --client
            kustomize version
            helm version
            golangci-lint version
            kind version
            docker --version || echo 'Docker CLI not available (expected in container)'
            echo 'âœ… All dev container tools verified'
          "

  lint-helm:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    needs: build-ci-container
    container:
      image: ${{ needs.build-ci-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Copy CRDs to Helm chart
        run: |
          cp config/crd/bases/*.yaml charts/gitops-reverser/crds/

      - name: Helm lint
        run: |
          helm lint charts/gitops-reverser

      - name: Helm template (dry-run)
        run: |
          helm template gitops-reverser charts/gitops-reverser \
            --namespace gitops-reverser-system \
            --set image.repository=test/image \
            --set image.tag=test

      - name: Validate packaged chart
        run: |
          helm package charts/gitops-reverser --destination /tmp

  test-helm-publish:
    name: Test Helm Chart Publishing
    runs-on: ubuntu-latest
    needs: [build-ci-container, lint-helm]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    container:
      image: ${{ needs.build-ci-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Copy CRDs to Helm chart
        run: |
          cp config/crd/bases/*.yaml charts/gitops-reverser/crds/

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Package Helm chart with CI version
        run: |
          CI_VERSION="0.4.0-ci-${GITHUB_SHA::7}"
          echo "ðŸ“¦ Packaging chart with version: ${CI_VERSION}"
          helm package charts/gitops-reverser --destination .helm-charts --version ${CI_VERSION} --app-version ${CI_VERSION}

      - name: Test push Helm chart to GHCR (verifies lowercase registry path)
        run: |
          CI_VERSION="0.4.0-ci-${GITHUB_SHA::7}"
          echo "ðŸš€ Testing Helm chart push to: ${{ env.CHART_REGISTRY }}"
          helm push .helm-charts/gitops-reverser-${CI_VERSION}.tgz oci://${{ env.CHART_REGISTRY }}
          echo "âœ… Helm chart push successful - registry path verified!"

  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    needs: build-ci-container
    container:
      image: ${{ needs.build-ci-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory (for now needed as workarround https://github.com/actions/checkout/issues/2031)
        run: git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          install-mode: none
          skip-cache: false
          skip-save-cache: false
          only-new-issues: ${{ github.event_name == 'pull_request' }}
          args: --timeout=5m --concurrency=4

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build-ci-container
    container:
      image: ${{ needs.build-ci-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Run tests
        run: make test

  docker-build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set full image name
        id: image
        run: |
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "name=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "Building image: ${FULL_IMAGE}"

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: linux/amd64
          tags: ${{ steps.image.outputs.name }}
          outputs: type=image,push=true
          cache-scope: build-linux/amd64

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-ci-container, docker-build]
    env:
      PROJECT_IMAGE: ${{ needs.docker-build.outputs.image }}
      KIND_CLUSTER: gitops-reverser-test-e2e
      CI_CONTAINER: ${{ needs.build-ci-container.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: ${{ env.KIND_CLUSTER }}
          version: v0.30.0
          kubectl_version: v1.32.3
          wait: 5m

      - name: Verify cluster is ready
        run: |
          kubectl cluster-info
          kubectl get nodes
          echo "âœ… Kind cluster is ready"

      - name: Login to Docker registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and load image to Kind
        run: |
          echo "Pulling image: ${{ env.PROJECT_IMAGE }}"
          docker pull ${{ env.PROJECT_IMAGE }}
          kind load docker-image ${{ env.PROJECT_IMAGE }} --name ${{ env.KIND_CLUSTER }}

      - name: Run E2E tests in CI container
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/workspace \
            -v $HOME/.kube:/root/.kube \
            -w /workspace \
            -e PROJECT_IMAGE=${{ env.PROJECT_IMAGE }} \
            -e KIND_CLUSTER=${{ env.KIND_CLUSTER }} \
            ${{ env.CI_CONTAINER }} \
            bash -c "
              git config --global --add safe.directory /workspace
              make test-e2e
            "

  # Release job only runs on push to main after tests pass
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-helm, lint, test, e2e-test, validate-devcontainer, test-helm-publish]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Build and push Docker images in parallel for each platform
  publish:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image by digest
        id: build
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          cache-scope: build-${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge all platform images into multi-arch manifests
  publish-manifest:
    name: Publish Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [release-please, publish]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Update release info
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          append_body: true
          body: |
            
            ## Installation
            
            ### Quick Install (Single YAML)
            
            ```bash
            kubectl apply -f https://github.com/ConfigButler/gitops-reverser/releases/download/${{ needs.release-please.outputs.tag_name }}/install.yaml
            ```
            
            ### Helm Chart
            
            ```bash
            helm install gitops-reverser oci://${{ env.CHART_REGISTRY }}/gitops-reverser --version ${{ needs.release-please.outputs.version }}
            ```
            
            ## Docker Images
            
            This release is available as a Docker image:
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            **Platforms:** linux/amd64, linux/arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Helm chart to ghcr.io as OCI artifact
  publish-helm:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [build-ci-container, release-please]
    if: needs.release-please.outputs.release_created == 'true'
    container:
      image: ${{ needs.build-ci-container.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Copy CRDs to Helm chart
        run: |
          cp config/crd/bases/*.yaml charts/gitops-reverser/crds/

      - name: Generate install.yaml from Helm chart
        run: |
          make build-installer IMG=ghcr.io/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Package Helm chart
        run: |
          helm package charts/gitops-reverser --destination .helm-charts --version ${{ needs.release-please.outputs.version }} --app-version ${{ needs.release-please.outputs.version }}

      - name: Push Helm chart to GHCR
        run: |
          helm push .helm-charts/gitops-reverser-${{ needs.release-please.outputs.version }}.tgz oci://${{ env.CHART_REGISTRY }}

      - name: Upload install.yaml as release asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: dist/install.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
