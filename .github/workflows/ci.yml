name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25.1'
  KUSTOMIZE_VERSION: 'v5.4.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: configbutler/gitops-reverser
  IMAGE_TAG: ci-${{ github.sha }}

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  build-devcontainer:
    name: Build Dev Container
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image name
        id: image
        run: |
          IMAGE="${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:${{ github.sha }}"
          echo "name=${IMAGE}" >> $GITHUB_OUTPUT
          echo "Building dev container: ${IMAGE}"

      - name: Build and push dev container
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .devcontainer/Dockerfile
          push: true
          tags: |
            ${{ steps.image.outputs.name }}
            ${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/configbutler/gitops-reverser-devcontainer:buildcache,mode=max

  lint-and-test:
    name: Lint and unit tests
    runs-on: ubuntu-latest
    needs: build-devcontainer
    container:
      image: ${{ needs.build-devcontainer.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: /root/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: /root/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-

      - name: Verify dev container tools
        run: |
          echo "=== Verifying pre-installed tools ==="
          go version
          kind version
          kubectl version --client
          kustomize version
          golangci-lint version

      - name: Check cache status
        run: |
          echo "=== Cache Status ==="
          if [ -d "/root/.cache/go-build" ] && [ "$(ls -A /root/.cache/go-build)" ]; then
            echo "✓ Go build cache found:"
            du -sh /root/.cache/go-build
          else
            echo "⚠️  WARNING: Go build cache is empty - first run will be slower"
          fi
          
          if [ -d "/root/.cache/golangci-lint" ] && [ "$(ls -A /root/.cache/golangci-lint)" ]; then
            echo "✓ golangci-lint cache found:"
            du -sh /root/.cache/golangci-lint
          else
            echo "⚠️  WARNING: golangci-lint cache is empty - first run will be slower"
          fi

      - name: Run lint
        run: make lint

      - name: Run tests
        run: make test

  docker-build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set full image name
        id: image
        run: |
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo "name=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "Building image: ${FULL_IMAGE}"

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: linux/amd64
          tags: ${{ steps.image.outputs.name }}
          outputs: type=image,push=true
          cache-scope: build-linux/amd64

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-devcontainer, docker-build]
    container:
      image: ${{ needs.build-devcontainer.outputs.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      options: --privileged -v /var/run/docker.sock:/var/run/docker.sock
    env:
      TEST_IMAGE: ${{ needs.docker-build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory /__w/gitops-reverser/gitops-reverser

      - name: Verify Docker is available
        run: |
          docker version
          docker info

      - name: Verify dev container tools
        run: |
          echo "=== Verifying pre-installed tools ==="
          go version
          kind version
          kubectl version --client

      - name: Set up KinD cluster
        run: |
          # Create Kind cluster with default networking
          kind create cluster --name gitops-reverser-test-e2e --wait 5m
          
          # Get the current container's network (GitHub Actions network)
          CURRENT_CONTAINER=$(hostname)
          GITHUB_NETWORK=$(docker inspect ${CURRENT_CONTAINER} -f '{{range $net,$v := .NetworkSettings.Networks}}{{$net}}{{end}}' | head -n1)
          echo "Current container network: ${GITHUB_NETWORK}"
          
          # Connect Kind control-plane to the same network
          echo "Connecting Kind container to ${GITHUB_NETWORK}..."
          docker network connect ${GITHUB_NETWORK} gitops-reverser-test-e2e-control-plane
          
          # Get Kind container's IP on the shared network
          KIND_IP=$(docker inspect gitops-reverser-test-e2e-control-plane -f "{{.NetworkSettings.Networks.${GITHUB_NETWORK}.IPAddress}}")
          echo "Kind container IP on shared network: ${KIND_IP}"
          
          # Get the API server port
          API_PORT=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}' | sed 's/.*://')
          echo "API server port: ${API_PORT}"
          
          # Update kubeconfig to use the Kind container IP on shared network
          kubectl config set-cluster kind-gitops-reverser-test-e2e --server=https://${KIND_IP}:${API_PORT}
          
          # Verify the updated configuration
          KUBECONFIG_SERVER=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')
          echo "Updated Kind API server: ${KUBECONFIG_SERVER}"
          
          # Verify connection
          kubectl cluster-info
          kubectl get nodes

      - name: Login to Docker registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Pull and load image to KinD
        run: |
          echo "Pulling image: ${{ needs.docker-build.outputs.image }}"
          docker pull ${{ needs.docker-build.outputs.image }}
          kind load docker-image ${{ needs.docker-build.outputs.image }} --name gitops-reverser-test-e2e

      - name: Run E2E tests
        run: |
          export PROJECT_IMAGE="${{ needs.docker-build.outputs.image }}"
          make test-e2e

  # Release job only runs on push to main after tests pass
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint-and-test, e2e-test]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Build and push Docker images in parallel for each platform
  publish:
    name: Build ${{ matrix.platform }}
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created == 'true'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image by digest
        id: build
        uses: ./.github/actions/docker-build
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          cache-scope: build-${{ matrix.platform }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ strategy.job-index }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Merge all platform images into multi-arch manifests
  publish-manifest:
    name: Publish Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [release-please, publish]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release-please.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.release-please.outputs.version }}
            type=raw,value=latest

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Update release with Docker image info
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          append_body: true
          body: |
            
            ## Docker Images
            
            This release is available as a Docker image:
            
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            **Platforms:** linux/amd64, linux/arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
